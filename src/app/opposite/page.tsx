"use client"
import { useState, useEffect } from 'react'
import Link from 'next/link'
import Header from "@/components/Header"
import { 
  Heart, 
  MessageCircle, 
  Calendar, 
  Users, 
  Lightbulb, 
  Compass, 
  Search,
  TrendingUp,
  TrendingDown,
  Sparkles,
  RotateCw,
  Home,
  Plus,
  Bell,
  User,
  Menu,
  X,
  LogIn,
  BookOpen,
  ExternalLink
} from 'lucide-react'

const mylink = "https://withudiary.my" //https://withudiary.my

// API Ìò∏Ï∂ú Ìï®ÏàòÎì§
const authAPI = {
  getCurrentUser: async () => {
    const response = await fetch(mylink+'/api/auth/me', {
      method: 'GET',
      credentials: 'include',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('auth-token') || ''}`
      }
    })
    
    if (!response.ok) {
      throw new Error(`Ïù∏Ï¶ù Ïã§Ìå®: ${response.status}`)
    }
    
    return response.json()
  }
}



// ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Îß§Ìïë Ìï®Ïàò (Í∏∞Ï°¥Í≥º ÎèôÏùº)
const getUserInfoFromId = (userId) => {
  const names = [
    'ÍπÄÌïòÎäò', 'Ïù¥Î∞îÎã§', 'Î∞ïÎ≥ÑÎãò', 'ÏµúÎã¨Îπõ', 'Ï†ïÌñáÏÇ¥', 'Ïû•ÍΩÉÎãò', 'Ïú§Íµ¨Î¶Ñ', 'ÏûÑÎÇòÎ¨¥', 'ÌïúÎ∞îÎûå', 'Ïò§ÏÉàÎ≤Ω',
    'Í∞ïÏó¨Î¶Ñ', 'ÏÜ°Í∞ÄÏùÑ', 'Ï°∞Í≤®Ïö∏', 'Í∂åÎ¥ÑÎÇ†', 'Ïú†ÌñâÎ≥µ', 'ÎÖ∏ÌèâÌôî', 'ÎèÑÌù¨Îßù', 'Î•òÏÇ¨Îûë', 'ÏÑúÏßÄÌòú', 'Î¨∏ÏòàÏùÄ',
    'Ïã†ÎØºÏ§Ä', 'ÍπÄÌÉúÏñë', 'Ïù¥Îã¨Îãò', 'Î∞ïÏßÄÏàò', 'ÏµúÏàòÏßÑ', 'Ï†ïÎØ∏Îûò', 'Ïû•ÏÜåÎßù', 'Ïú§Í∏∞ÏÅ®', 'ÏûÑÏõÉÏùå', 'ÌïúÌèâÏò®',
    'Ïò§ÏûêÏú†', 'Í∞ïÏàúÏàò', 'ÏÜ°ÎßëÏùå', 'Ï°∞Í≥†Ïöî', 'Í∂åÎî∞Îúª', 'Ïú†Ìè¨Í∑º', 'ÎÖ∏ÏùÄÌòú', 'ÎèÑÍ∞êÏÇ¨', 'Î•òÍ∏∞Ï†Å', 'ÏÑúÏ∂ïÎ≥µ',
    'Î¨∏ÏÜåÏ§ë', 'Ïã†Í∑ÄÌïú', 'ÍπÄÎπõÎÇò', 'Ïù¥ÏòÅÎ°±', 'Î∞ïÍ≥†Ïö¥', 'ÏµúÏïÑÎ¶Ñ', 'Ï†ïÎã®ÏïÑ', 'Ïû•ÏòàÏÅú', 'Ïú§ÏÇ¨Îûë', 'ÏûÑÍ∏∞Î∂Ñ',
    'ÌïúÏÑ§Î†ò', 'Ïò§Îñ®Î¶º', 'Í∞ïÎëêÍ∑º', 'ÏÜ°Ïã†ÎÇ®', 'Ï°∞Ï¶êÍ±∞', 'Í∂åÌñâÎ≥µ', 'Ïú†ÎßåÏ°±', 'ÎÖ∏Ï∂©Îßå', 'ÎèÑÏôÑÏ†Ñ', 'Î•òÏµúÍ≥†'
  ]
  
  const nameIndex = (userId - 1) % names.length
  
  return {
    id: userId,
    nickname: names[nameIndex],
    email: `user${userId}@example.com`,
    profileImage: `https://www.gravatar.com/avatar/${userId}?d=identicon`
  }
}

// Í∞êÏ†ï Ïù¥Î™®ÏßÄ Îß§Ìïë
const getEmotionEmoji = (summary) => {
  const text = summary.toLowerCase()
  if (text.includes('Í∏∞ÏÅ®') || text.includes('ÌñâÎ≥µ') || text.includes('Ï¶êÍ±∞') || text.includes('ÏÑ±Í≥µ')) return 'üòä'
  if (text.includes('Ïä¨Ìîî') || text.includes('Ïö∞Ïö∏') || text.includes('ÌûòÎì§') || text.includes('ÏïÑÏâ¨')) return 'üò¢'
  if (text.includes('Ìôî') || text.includes('Î∂ÑÎÖ∏') || text.includes('ÏßúÏ¶ù') || text.includes('Ïä§Ìä∏Î†àÏä§')) return 'üò†'
  if (text.includes('Î∂àÏïà') || text.includes('Í±±Ï†ï') || text.includes('ÎëêÎ†§')) return 'üò∞'
  if (text.includes('ÎÜÄÎûå') || text.includes('ÍπúÏßù') || text.includes('Ïã†Í∏∞')) return 'üò≤'
  return 'üòê'
}

export default function EmotionRecommendationPage() {
  const [currentUser, setCurrentUser] = useState(null)
  const [isUserLoading, setIsUserLoading] = useState(true)
  const [recommendations, setRecommendations] = useState(null)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState(null)
  const [authError, setAuthError] = useState(null)

  // ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
  const fetchCurrentUser = async () => {
    try {
      setIsUserLoading(true)
      setAuthError(null)
      
      const userData = await authAPI.getCurrentUser()
      console.log('ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê:', userData)
      setCurrentUser(userData)
      
      // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò® ÌõÑ ÏûêÎèôÏúºÎ°ú Ï∂îÏ≤ú Îç∞Ïù¥ÌÑ∞ Î°úÎî©
      if (userData?.id) {
        await fetchRecommendations(userData.id)
      }
      
    } catch (err) {
      console.error('ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Î°úÎî© Ïã§Ìå®:', err)
      setAuthError(err.message)
      setCurrentUser(null)
    } finally {
      setIsUserLoading(false)
    }
  }

  // API Ìò∏Ï∂ú Ìï®Ïàò
  const fetchRecommendations = async (targetUserId) => {
    try {
      setIsLoading(true)
      setError(null)
      
      const response = await fetch(
        `https://3s71d8d8je.execute-api.us-east-1.amazonaws.com/prod/api/recommend/${targetUserId}`
      )
      
      if (!response.ok) {
        throw new Error(`API Ìò∏Ï∂ú Ïã§Ìå®: ${response.status}`)
      }
      
      const data = await response.json()
      console.log('Ï∂îÏ≤ú Îç∞Ïù¥ÌÑ∞:', data)
      setRecommendations(data)
      
    } catch (err) {
      console.error('Ï∂îÏ≤ú Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ïã§Ìå®:', err)
      setError(err.message)
      
      // Mock Îç∞Ïù¥ÌÑ∞Î°ú fallback
      setRecommendations({
        similar_users: [
          {
            user_id: 15,
            diary_id: 1001,
            summary: "Ïò§ÎäòÏùÄ Ï†ïÎßê Í∏∞Î∂Ñ Ï¢ãÏùÄ ÌïòÎ£®ÏòÄÎã§. ÏπúÍµ¨Îì§Í≥º Ìï®ÍªòÌïú ÏãúÍ∞ÑÏù¥ ÎÑàÎ¨¥ Ï¶êÍ±∞Ïõ†Îã§.",
            created_at: "2025-06-10T10:30:00"
          },
          {
            user_id: 23,
            diary_id: 1002,  
            summary: "ÏÉàÎ°úÏö¥ ÌîÑÎ°úÏ†ùÌä∏Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÎÅùÎÇòÏÑú ÎøåÎìØÌïòÎã§. ÌåÄÏõêÎì§Í≥ºÏùò ÌòëÏóÖÎèÑ Ï¢ãÏïòÎã§.",
            created_at: "2025-06-09T14:20:00"
          },
          {
            user_id: 31,
            diary_id: 1003,
            summary: "ÎßõÏûàÎäî ÏùåÏãùÏùÑ Î®πÍ≥† Ï¢ãÏùÄ ÏòÅÌôîÎ•º Î¥§Îã§. ÏôÑÎ≤ΩÌïú Ï£ºÎßêÏù¥ÏóàÎã§.",
            created_at: "2025-06-08T18:45:00"
          }
        ],
        opposite_users: [
          {
            user_id: 7,
            diary_id: 2001,
            summary: "Ïò§ÎäòÏùÄ Ïô†ÏßÄ Ïö∞Ïö∏ÌïòÍ≥† Í∏∞Î∂ÑÏù¥ Ï¢ãÏßÄ ÏïäÏïòÎã§. Î™®Îì† Í≤å ÌûòÎì§Í≤å ÎäêÍª¥ÏßÑÎã§.",
            created_at: "2025-06-10T09:15:00"
          },
          {
            user_id: 19,
            diary_id: 2002,
            summary: "ÏùºÏù¥ Ïûò Ïïà ÌíÄÎ†§ÏÑú Ïä§Ìä∏Î†àÏä§Í∞Ä ÎßéÎã§. Ï¢Ä Îçî ÎÖ∏Î†•Ìï¥ÏïºÍ≤†Îã§.",
            created_at: "2025-06-09T16:30:00"
          },
          {
            user_id: 42,
            diary_id: 2003,
            summary: "ÎπÑÍ∞Ä ÏôÄÏÑú Í∑∏Îü∞ÏßÄ ÎßàÏùåÏù¥ Ïπ®Ïö∏ÌïòÎã§. ÌòºÏûê ÏûàÎäî ÏãúÍ∞ÑÏù¥ Ïô∏Î°≠Îã§.",
            created_at: "2025-06-08T20:10:00"
          }
        ]
      })
    } finally {
      setIsLoading(false)
    }
  }

  // ÌéòÏù¥ÏßÄ Î°úÎìúÏãú ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Î∞è Ï∂îÏ≤ú Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞
  useEffect(() => {
    fetchCurrentUser()
  }, [])

  // ÏÉàÎ°úÍ≥†Ïπ® Î≤ÑÌäº Ï≤òÎ¶¨
  const handleRefresh = () => {
    if (currentUser?.id) {
      fetchRecommendations(currentUser.id)
    }
  }

  // ÏùºÍ∏∞ Ïπ¥Îìú Ïª¥Ìè¨ÎÑåÌä∏ (ÌÅ¥Î¶≠ Ïãú ÏÉÅÏÑ∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô)
  const DiaryCard = ({ diary, type }) => {
    const userInfo = getUserInfoFromId(diary.user_id)
    const emoji = getEmotionEmoji(diary.summary)
    const isOpposite = type === 'opposite'
    
    return (
      <Link 
        href={`/diary2/${diary.diary_id}`}
        className="block group"
      >
        <div className={`bg-white rounded-xl p-6 shadow-sm border-2 transition-all duration-300 hover:shadow-lg group-hover:scale-[1.02] cursor-pointer ${
          isOpposite 
            ? 'border-purple-200 hover:border-purple-300 group-hover:bg-purple-50/30' 
            : 'border-blue-200 hover:border-blue-300 group-hover:bg-blue-50/30'
        }`}>
          <div className="flex items-start justify-between mb-4">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-slate-200 rounded-full overflow-hidden">
                <img
                  src={userInfo.profileImage}
                  alt={userInfo.nickname}
                  className="w-full h-full object-cover"
                />
              </div>
              <div>
                <p className="font-semibold text-slate-900 group-hover:text-slate-800 transition-colors">
                  {userInfo.nickname}
                </p>
                <p className="text-sm text-slate-500">
                  {new Date(diary.created_at).toLocaleDateString('ko-KR', {
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                  })}
                </p>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <span className="text-2xl">{emoji}</span>
              {isOpposite ? (
                <TrendingDown className="w-5 h-5 text-purple-500" />
              ) : (
                <TrendingUp className="w-5 h-5 text-blue-500" />
              )}
              <ExternalLink className={`w-4 h-4 opacity-0 group-hover:opacity-100 transition-opacity ${
                isOpposite ? 'text-purple-400' : 'text-blue-400'
              }`} />
            </div>
          </div>
          
          <p className="text-slate-700 leading-relaxed mb-4 group-hover:text-slate-600 transition-colors">
            {diary.summary}
          </p>
          
          <div className="flex items-center justify-between">
            <span className={`px-3 py-1 rounded-full text-xs font-medium transition-colors ${
              isOpposite 
                ? 'bg-purple-50 text-purple-700 group-hover:bg-purple-100' 
                : 'bg-blue-50 text-blue-700 group-hover:bg-blue-100'
            }`}>
              {isOpposite ? 'Î∞òÎåÄ Í∞êÏ†ï' : 'Ïú†ÏÇ¨ Í∞êÏ†ï'}
            </span>
            
            <div className="flex items-center space-x-4 text-sm text-slate-500">
              <button 
                className="flex items-center space-x-1 hover:text-red-500 transition-colors"
                onClick={(e) => e.preventDefault()} // Ïπ¥Îìú ÎßÅÌÅ¨ÏôÄ Î∂ÑÎ¶¨
              >
                <Heart className="w-4 h-4" />
                <span>{Math.floor(Math.random() * 15) + 1}</span>
              </button>
              <button 
                className="flex items-center space-x-1 hover:text-blue-500 transition-colors"
                onClick={(e) => e.preventDefault()} // Ïπ¥Îìú ÎßÅÌÅ¨ÏôÄ Î∂ÑÎ¶¨
              >
                <MessageCircle className="w-4 h-4" />
                <span>{Math.floor(Math.random() * 8) + 1}</span>
              </button>
            </div>
          </div>
        </div>
      </Link>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50">
      {/* ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ìó§Îçî */}
      <Header/>

      {/* ÌéòÏù¥ÏßÄ Ìó§Îçî */}
      <div className="bg-white shadow-sm border-b border-slate-200">
        <div className="max-w-6xl mx-auto px-4 py-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-slate-900 flex items-center">
                <Compass className="w-8 h-8 mr-3 text-purple-600" />
                Í∞êÏ†ï ÌÉêÌóò
              </h1>
              <p className="text-slate-600 mt-1">AIÍ∞Ä Î∂ÑÏÑùÌïú ÎãπÏã†Ïùò Í∞êÏ†ïÏùÑ Î∞îÌÉïÏúºÎ°ú ÎßûÏ∂§Ìòï Ï∂îÏ≤úÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§</p>
            </div>
            <Sparkles className="w-12 h-12 text-purple-400" />
          </div>
        </div>
      </div>

      <main className="max-w-6xl mx-auto px-4 py-8">
        {/* Î°úÎî© ÏÉÅÌÉú - ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ */}
        {isUserLoading && (
          <div className="flex justify-center items-center h-64">
            <div className="text-center">
              <div className="w-12 h-12 border-4 border-purple-600 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
              <p className="text-slate-600">ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º ÌôïÏù∏ÌïòÍ≥† ÏûàÏäµÎãàÎã§...</p>
            </div>
          </div>
        )}

        {/* Ïù∏Ï¶ù ÏóêÎü¨ - Î°úÍ∑∏Ïù∏ ÌïÑÏöî */}
        {authError && !isUserLoading && (
          <div className="bg-red-50 border border-red-200 rounded-xl p-8 text-center">
            <LogIn className="w-16 h-16 mx-auto mb-4 text-red-400" />
            <h3 className="text-xl font-semibold text-red-800 mb-2">Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§</h3>
            <p className="text-red-600 mb-4">
              Í∞êÏ†ï Ï∂îÏ≤ú ÏÑúÎπÑÏä§Î•º Ïù¥Ïö©ÌïòÎ†§Î©¥ Î®ºÏ†Ä Î°úÍ∑∏Ïù∏Ìï¥ Ï£ºÏÑ∏Ïöî.
            </p>
            <Link 
              href="/login"
              className="inline-flex items-center px-6 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
            >
              <LogIn className="w-4 h-4 mr-2" />
              Î°úÍ∑∏Ïù∏ÌïòÎü¨ Í∞ÄÍ∏∞
            </Link>
          </div>
        )}

        {/* ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÌëúÏãú */}
        {currentUser && !isUserLoading && (
          <div className="bg-white rounded-xl p-6 shadow-sm border border-slate-200 mb-8">
            <h2 className="text-xl font-semibold text-slate-900 mb-4 flex items-center">
              <Users className="w-5 h-5 mr-2 text-purple-600" />
              ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥
            </h2>
            
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <div className="w-12 h-12 bg-slate-200 rounded-full overflow-hidden">
                  <img
                    src={`https://www.gravatar.com/avatar/${currentUser.id}?d=identicon`}
                    alt={currentUser.nickname || currentUser.email}
                    className="w-full h-full object-cover"
                  />
                </div>
                <div>
                  <p className="font-semibold text-slate-900">
                    {currentUser.nickname || currentUser.email || `ÏÇ¨Ïö©Ïûê ${currentUser.id}`}
                  </p>
                  <p className="text-sm text-slate-500">ID: {currentUser.id}</p>
                </div>
              </div>
              
              <button
                onClick={handleRefresh}
                disabled={isLoading}
                className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center space-x-2"
              >
                {isLoading ? (
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                ) : (
                  <RotateCw className="w-4 h-4" />
                )}
                <span>{isLoading ? 'Î∂ÑÏÑù Ï§ë...' : 'ÏÉàÎ°úÍ≥†Ïπ®'}</span>
              </button>
            </div>
          </div>
        )}

        {/* ÏóêÎü¨ Î©îÏãúÏßÄ */}
        {error && (
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-8">
            <p className="text-yellow-800">
              API Ïó∞Í≤∞Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. ÏûÑÏãú Îç∞Ïù¥ÌÑ∞Î•º ÌëúÏãúÌï©ÎãàÎã§. ({error})
            </p>
          </div>
        )}

        {/* Î°úÎî© ÏÉÅÌÉú - Ï∂îÏ≤ú Îç∞Ïù¥ÌÑ∞ */}
        {isLoading && currentUser && !recommendations && (
          <div className="flex justify-center items-center h-64">
            <div className="text-center">
              <div className="w-12 h-12 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
              <p className="text-slate-600">Í∞êÏ†ïÏùÑ Î∂ÑÏÑùÌïòÍ≥† ÏûàÏäµÎãàÎã§...</p>
            </div>
          </div>
        )}

        {/* Ï∂îÏ≤ú Í≤∞Í≥º */}
        {recommendations && currentUser && (
          <div className="space-y-12">
            {/* Î∞òÎåÄ Í∞êÏ†ï ÏÑπÏÖò */}
            <section>
              <div className="flex items-center justify-between mb-6">
                <div>
                  <h2 className="text-2xl font-bold text-slate-900 flex items-center">
                    <TrendingDown className="w-6 h-6 mr-3 text-purple-600" />
                    Î∞òÎåÄ Í∞êÏ†ïÏùò ÏùºÍ∏∞
                  </h2>
                  <p className="text-slate-600 mt-1">Îã§Î•∏ ÏãúÍ∞ÅÏúºÎ°ú Î∞îÎùºÎ≥¥Îäî Í≤ΩÌóòÎì§ (ÌÅ¥Î¶≠ÌïòÏó¨ ÏûêÏÑ∏Ìûà Î≥¥Í∏∞)</p>
                </div>
                <div className="bg-purple-50 px-4 py-2 rounded-full">
                  <span className="text-purple-700 font-medium">
                    {recommendations.opposite_users?.length || 0}Í∞ú
                  </span>
                </div>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {recommendations.opposite_users?.map((diary, index) => (
                  <DiaryCard key={`opposite-${index}`} diary={diary} type="opposite" />
                )) || (
                  <div className="col-span-full text-center py-12 text-slate-500">
                    Î∞òÎåÄ Í∞êÏ†ïÏùò ÏùºÍ∏∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.
                  </div>
                )}
              </div>
            </section>

            {/* Ïú†ÏÇ¨ Í∞êÏ†ï ÏÑπÏÖò */}
            <section>
              <div className="flex items-center justify-between mb-6">
                <div>
                  <h2 className="text-2xl font-bold text-slate-900 flex items-center">
                    <TrendingUp className="w-6 h-6 mr-3 text-blue-600" />
                    Ïú†ÏÇ¨ Í∞êÏ†ïÏùò ÏùºÍ∏∞
                  </h2>
                  <p className="text-slate-600 mt-1">Í≥µÍ∞êÌï† Ïàò ÏûàÎäî ÎπÑÏä∑Ìïú Í≤ΩÌóòÎì§ (ÌÅ¥Î¶≠ÌïòÏó¨ ÏûêÏÑ∏Ìûà Î≥¥Í∏∞)</p>
                </div>
                <div className="bg-blue-50 px-4 py-2 rounded-full">
                  <span className="text-blue-700 font-medium">
                    {recommendations.similar_users?.length || 0}Í∞ú
                  </span>
                </div>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {recommendations.similar_users?.map((diary, index) => (
                  <DiaryCard key={`similar-${index}`} diary={diary} type="similar" />
                )) || (
                  <div className="col-span-full text-center py-12 text-slate-500">
                    Ïú†ÏÇ¨ Í∞êÏ†ïÏùò ÏùºÍ∏∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.
                  </div>
                )}
              </div>
            </section>
          </div>
        )}

        {/* Ïù∏ÏÇ¨Ïù¥Ìä∏ ÏÑπÏÖò */}
        {recommendations && currentUser && (
          <section className="mt-12 bg-gradient-to-r from-purple-50 to-blue-50 rounded-xl p-8 border border-purple-200">
            <h3 className="text-xl font-semibold text-slate-900 mb-4 flex items-center">
              <Lightbulb className="w-5 h-5 mr-2 text-yellow-500" />
              Í∞êÏ†ï Ïù∏ÏÇ¨Ïù¥Ìä∏
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="bg-white rounded-lg p-4">
                <h4 className="font-medium text-purple-700 mb-2">Î∞òÎåÄ Í∞êÏ†ïÏúºÎ°úÎ∂ÄÌÑ∞</h4>
                <p className="text-sm text-slate-600">
                  Îã§Î•∏ Í¥ÄÏ†êÏùò Í≤ΩÌóòÏùÑ ÌÜµÌï¥ ÎÇ¥ Í∞êÏ†ïÏùÑ Í∞ùÍ¥ÄÏ†ÅÏúºÎ°ú Î∞îÎùºÎ≥º Ïàò ÏûàÏñ¥Ïöî. 
                  ÎïåÎ°úÎäî Ï†ïÎ∞òÎåÄÏùò ÏãúÍ∞ÅÏù¥ ÏÉàÎ°úÏö¥ ÌÜµÏ∞∞ÏùÑ Í∞ÄÏ†∏Îã§Ï§çÎãàÎã§.
                </p>
              </div>
              <div className="bg-white rounded-lg p-4">
                <h4 className="font-medium text-blue-700 mb-2">Ïú†ÏÇ¨ Í∞êÏ†ïÏúºÎ°úÎ∂ÄÌÑ∞</h4>
                <p className="text-sm text-slate-600">
                  ÎπÑÏä∑Ìïú Í∞êÏ†ïÏùÑ ÎäêÎÇÄ ÏÇ¨ÎûåÎì§Ïùò Í≤ΩÌóòÏùÑ ÌÜµÌï¥ Í≥µÍ∞êÎåÄÎ•º ÌòïÏÑ±ÌïòÍ≥† 
                  ÌòºÏûêÍ∞Ä ÏïÑÎãàÎùºÎäî ÏúÑÎ°úÎ•º Î∞õÏùÑ Ïàò ÏûàÏñ¥Ïöî.
                </p>
              </div>
            </div>
          </section>
        )}
      </main>

      {/* Mobile Bottom Navigation */}
      <div className="md:hidden fixed bottom-0 left-0 right-0 bg-white border-t border-slate-200 px-4 py-2 z-40">
        <div className="flex items-center justify-around">
          <Link href="/dashboard" className="flex flex-col items-center space-y-1 p-2 text-slate-400">
            <Home className="w-5 h-5" />
            <span className="text-xs">Ìôà</span>
          </Link>
          <Link href="/write" className="flex flex-col items-center space-y-1 p-2 text-slate-400">
            <Plus className="w-5 h-5" />
            <span className="text-xs">ÏûëÏÑ±</span>
          </Link>
          <Link href="/communities" className="flex flex-col items-center space-y-1 p-2 text-slate-400">
            <Users className="w-5 h-5" />
            <span className="text-xs">ÎÇòÎàîÎ∞©</span>
          </Link>
          <button className="flex flex-col items-center space-y-1 p-2 text-purple-600">
            <Compass className="w-5 h-5" />
            <span className="text-xs font-medium">Í∞êÏ†ïÌÉêÌóò</span>
          </button>
          <button className="flex flex-col items-center space-y-1 p-2 text-slate-400 relative">
            <Bell className="w-5 h-5" />
            <span className="text-xs">ÏïåÎ¶º</span>
            <div className="absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full"></div>
          </button>
        </div>
      </div>

      {/* Mobile Bottom Padding */}
      <div className="md:hidden h-20"></div>
    </div>
  )
}